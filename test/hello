  .file 1 "./test/hello.c"
  .file 2 "/usr/include/stdio.h"
  .file 3 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h"
  .file 4 "/usr/include/features.h"
  .file 5 "/usr/include/features-time64.h"
  .file 6 "/usr/include/x86_64-linux-gnu/bits/wordsize.h"
  .file 7 "/usr/include/x86_64-linux-gnu/bits/timesize.h"
  .file 8 "/usr/include/x86_64-linux-gnu/bits/wordsize.h"
  .file 9 "/usr/include/stdc-predef.h"
  .file 10 "/usr/include/x86_64-linux-gnu/sys/cdefs.h"
  .file 11 "/usr/include/x86_64-linux-gnu/bits/wordsize.h"
  .file 12 "/usr/include/x86_64-linux-gnu/bits/long-double.h"
  .file 13 "/usr/include/x86_64-linux-gnu/gnu/stubs.h"
  .file 14 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h"
  .file 15 "./include/stddef.h"
  .file 16 "./include/stdarg.h"
  .file 17 "/usr/include/x86_64-linux-gnu/bits/types.h"
  .file 18 "/usr/include/x86_64-linux-gnu/bits/wordsize.h"
  .file 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h"
  .file 20 "/usr/include/x86_64-linux-gnu/bits/wordsize.h"
  .file 21 "/usr/include/x86_64-linux-gnu/bits/typesizes.h"
  .file 22 "/usr/include/x86_64-linux-gnu/bits/time64.h"
  .file 23 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h"
  .file 24 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
  .file 25 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h"
  .file 26 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
  .file 27 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
  .file 28 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
  .file 29 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h"
  .file 30 "/usr/include/x86_64-linux-gnu/bits/floatn.h"
  .file 31 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h"
  .file 32 "/usr/include/x86_64-linux-gnu/bits/long-double.h"
  .local .L..8
  .data
  .type .L..8, @object
  .size .L..8, 14
  .align 1
.L..8:
  .byte 72
  .byte 101
  .byte 108
  .byte 108
  .byte 111
  .byte 32
  .byte 87
  .byte 111
  .byte 114
  .byte 108
  .byte 100
  .byte 33
  .byte 10
  .byte 0
  .local .L..7
  .data
  .type .L..7, @object
  .size .L..7, 5
  .align 1
.L..7:
  .byte 109
  .byte 97
  .byte 105
  .byte 110
  .byte 0
  .local .L..6
  .data
  .type .L..6, @object
  .size .L..6, 5
  .align 1
.L..6:
  .byte 109
  .byte 97
  .byte 105
  .byte 110
  .byte 0
  .local .L..5
  .data
  .type .L..5, @object
  .size .L..5, 12
  .align 1
.L..5:
  .byte 95
  .byte 95
  .byte 118
  .byte 97
  .byte 95
  .byte 97
  .byte 114
  .byte 103
  .byte 95
  .byte 102
  .byte 112
  .byte 0
  .local .L..4
  .data
  .type .L..4, @object
  .size .L..4, 12
  .align 1
.L..4:
  .byte 95
  .byte 95
  .byte 118
  .byte 97
  .byte 95
  .byte 97
  .byte 114
  .byte 103
  .byte 95
  .byte 102
  .byte 112
  .byte 0
  .local .L..3
  .data
  .type .L..3, @object
  .size .L..3, 12
  .align 1
.L..3:
  .byte 95
  .byte 95
  .byte 118
  .byte 97
  .byte 95
  .byte 97
  .byte 114
  .byte 103
  .byte 95
  .byte 103
  .byte 112
  .byte 0
  .local .L..2
  .data
  .type .L..2, @object
  .size .L..2, 12
  .align 1
.L..2:
  .byte 95
  .byte 95
  .byte 118
  .byte 97
  .byte 95
  .byte 97
  .byte 114
  .byte 103
  .byte 95
  .byte 103
  .byte 112
  .byte 0
  .local .L..1
  .data
  .type .L..1, @object
  .size .L..1, 13
  .align 1
.L..1:
  .byte 95
  .byte 95
  .byte 118
  .byte 97
  .byte 95
  .byte 97
  .byte 114
  .byte 103
  .byte 95
  .byte 109
  .byte 101
  .byte 109
  .byte 0
  .local .L..0
  .data
  .type .L..0, @object
  .size .L..0, 13
  .align 1
.L..0:
  .byte 95
  .byte 95
  .byte 118
  .byte 97
  .byte 95
  .byte 97
  .byte 114
  .byte 103
  .byte 95
  .byte 109
  .byte 101
  .byte 109
  .byte 0
  .globl main
  .text
  .type main, @function
main:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %edi, -12(%rbp)
  mov %rsi, -24(%rbp)
  .loc 1 4
  .loc 1 4
  .loc 1 4
  .loc 1 4
  .loc 1 4
  lea .L..8(%rip), %rax
  push %rax
  .loc 1 4
  mov printf@GOTPCREL(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  .loc 1 5
  .loc 1 5
  .loc 1 5
  mov $0, %rax
  jmp .L.return.main
  mov $0, %rax
.L.return.main:
  mov %rbp, %rsp
  pop %rbp
  ret
  .local __va_arg_fp
  .text
  .type __va_arg_fp, @function
__va_arg_fp:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -24(%rbp)
  mov %rdi, -32(%rbp)
  mov %esi, -36(%rbp)
  mov %edx, -40(%rbp)
  .loc 16 36
  .loc 16 36
  .loc 16 36
  .loc 16 36
  .loc 16 36
  .loc 16 36
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $4, %rax
  movsxd (%rax), %rax
  push %rax
  .loc 16 36
  .loc 16 36
  mov $112, %rax
  pop %rdi
  cmp %edi, %eax
  setbe %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.1
  .loc 16 37
  .loc 16 37
  .loc 16 37
  .loc 16 37
  .loc 16 37
  lea -40(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  .loc 16 37
  .loc 16 37
  lea -36(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  .loc 16 37
  .loc 16 37
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  .loc 16 37
  lea __va_arg_mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.return.__va_arg_fp
  jmp .L.end.1
.L.else.1:
.L.end.1:
  .loc 16 39
  .loc 16 39
  .loc 16 39
  .loc 16 39
  .loc 16 39
  .loc 16 39
  .loc 16 39
  .loc 16 39
  mov $8, %rcx
  lea -16(%rbp), %rdi
  mov $0, %al
  rep stosb
  .loc 16 39
  lea -16(%rbp), %rax
  push %rax
  .loc 16 39
  .loc 16 39
  .loc 16 39
  .loc 16 39
  .loc 16 39
  .loc 16 39
  mov $1, %rax
  push %rax
  .loc 16 39
  .loc 16 39
  .loc 16 39
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $4, %rax
  movsxd (%rax), %rax
  mov %eax, %eax
  pop %rdi
  imul %rdi, %rax
  push %rax
  .loc 16 39
  .loc 16 39
  .loc 16 39
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  .loc 16 40
  .loc 16 40
  .loc 16 40
  lea -8(%rbp), %rax
  push %rax
  .loc 16 40
  .loc 16 40
  .loc 16 40
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  .loc 16 40
  .loc 16 40
  lea -8(%rbp), %rax
  mov (%rax), %rax
  add $4, %rax
  push %rax
  .loc 16 40
  .loc 16 40
  .loc 16 40
  .loc 16 40
  mov $8, %rax
  push %rax
  .loc 16 40
  .loc 16 40
  .loc 16 40
  lea -8(%rbp), %rax
  mov (%rax), %rax
  add $4, %rax
  movsxd (%rax), %rax
  pop %rdi
  add %edi, %eax
  pop %rdi
  mov %eax, (%rdi)
  .loc 16 41
  .loc 16 41
  .loc 16 41
  lea -16(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.__va_arg_fp
.L.return.__va_arg_fp:
  mov %rbp, %rsp
  pop %rbp
  ret
  .local __va_arg_gp
  .text
  .type __va_arg_gp, @function
__va_arg_gp:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -24(%rbp)
  mov %rdi, -32(%rbp)
  mov %esi, -36(%rbp)
  mov %edx, -40(%rbp)
  .loc 16 27
  .loc 16 27
  .loc 16 27
  .loc 16 27
  .loc 16 27
  .loc 16 27
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  movsxd (%rax), %rax
  push %rax
  .loc 16 27
  .loc 16 27
  mov $48, %rax
  pop %rdi
  cmp %edi, %eax
  setbe %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.2
  .loc 16 28
  .loc 16 28
  .loc 16 28
  .loc 16 28
  .loc 16 28
  lea -40(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  .loc 16 28
  .loc 16 28
  lea -36(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  .loc 16 28
  .loc 16 28
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  .loc 16 28
  lea __va_arg_mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.return.__va_arg_gp
  jmp .L.end.2
.L.else.2:
.L.end.2:
  .loc 16 30
  .loc 16 30
  .loc 16 30
  .loc 16 30
  .loc 16 30
  .loc 16 30
  .loc 16 30
  .loc 16 30
  mov $8, %rcx
  lea -16(%rbp), %rdi
  mov $0, %al
  rep stosb
  .loc 16 30
  lea -16(%rbp), %rax
  push %rax
  .loc 16 30
  .loc 16 30
  .loc 16 30
  .loc 16 30
  .loc 16 30
  .loc 16 30
  mov $1, %rax
  push %rax
  .loc 16 30
  .loc 16 30
  .loc 16 30
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  movsxd (%rax), %rax
  mov %eax, %eax
  pop %rdi
  imul %rdi, %rax
  push %rax
  .loc 16 30
  .loc 16 30
  .loc 16 30
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  .loc 16 31
  .loc 16 31
  .loc 16 31
  lea -8(%rbp), %rax
  push %rax
  .loc 16 31
  .loc 16 31
  .loc 16 31
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  .loc 16 31
  .loc 16 31
  lea -8(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  push %rax
  .loc 16 31
  .loc 16 31
  .loc 16 31
  .loc 16 31
  mov $8, %rax
  push %rax
  .loc 16 31
  .loc 16 31
  .loc 16 31
  lea -8(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  movsxd (%rax), %rax
  pop %rdi
  add %edi, %eax
  pop %rdi
  mov %eax, (%rdi)
  .loc 16 32
  .loc 16 32
  .loc 16 32
  lea -16(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.__va_arg_gp
.L.return.__va_arg_gp:
  mov %rbp, %rsp
  pop %rbp
  ret
  .local __va_arg_mem
  .text
  .type __va_arg_mem, @function
__va_arg_mem:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -16(%rbp)
  mov %rdi, -24(%rbp)
  mov %esi, -28(%rbp)
  mov %edx, -32(%rbp)
  .loc 16 19
  .loc 16 19
  .loc 16 19
  .loc 16 19
  .loc 16 19
  .loc 16 19
  .loc 16 19
  .loc 16 19
  .loc 16 19
  mov $8, %rcx
  lea -8(%rbp), %rdi
  mov $0, %al
  rep stosb
  .loc 16 19
  lea -8(%rbp), %rax
  push %rax
  .loc 16 19
  .loc 16 19
  .loc 16 19
  lea -24(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  .loc 16 20
  .loc 16 20
  .loc 16 20
  .loc 16 20
  lea -32(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  .loc 16 20
  .loc 16 20
  mov $8, %rax
  pop %rdi
  cmp %edi, %eax
  setl %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.3
  .loc 16 21
  .loc 16 21
  lea -8(%rbp), %rax
  push %rax
  .loc 16 21
  .loc 16 21
  .loc 16 21
  .loc 16 21
  mov $16, %rax
  movsxd %eax, %rax
  push %rax
  .loc 16 21
  .loc 16 21
  .loc 16 21
  .loc 16 21
  mov $16, %rax
  movsxd %eax, %rax
  push %rax
  .loc 16 21
  .loc 16 21
  .loc 16 21
  .loc 16 21
  .loc 16 21
  .loc 16 21
  mov $1, %rax
  push %rax
  .loc 16 21
  .loc 16 21
  mov $15, %rax
  movsxd %eax, %rax
  pop %rdi
  imul %rdi, %rax
  push %rax
  .loc 16 21
  .loc 16 21
  lea -8(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov $0, %rdx
  div %rdi
  pop %rdi
  imul %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  jmp .L.end.3
.L.else.3:
.L.end.3:
  .loc 16 22
  .loc 16 22
  .loc 16 22
  lea -24(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  push %rax
  .loc 16 22
  .loc 16 22
  .loc 16 22
  .loc 16 22
  mov $8, %rax
  movsxd %eax, %rax
  push %rax
  .loc 16 22
  .loc 16 22
  .loc 16 22
  .loc 16 22
  mov $8, %rax
  movsxd %eax, %rax
  push %rax
  .loc 16 22
  .loc 16 22
  .loc 16 22
  .loc 16 22
  mov $7, %rax
  movsxd %eax, %rax
  push %rax
  .loc 16 22
  .loc 16 22
  .loc 16 22
  .loc 16 22
  lea -28(%rbp), %rax
  movsxd (%rax), %rax
  movsxd %eax, %rax
  push %rax
  .loc 16 22
  .loc 16 22
  .loc 16 22
  lea -8(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov $0, %rdx
  div %rdi
  pop %rdi
  imul %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  .loc 16 23
  .loc 16 23
  .loc 16 23
  lea -8(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.__va_arg_mem
.L.return.__va_arg_mem:
  mov %rbp, %rsp
  pop %rbp
  ret
